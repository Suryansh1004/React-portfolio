{"version":3,"sources":["assets/arrow-left.svg","assets/arrow-right.svg","components/Carousel/index.js","components/Carousel/carouselShader.js","utils/image.js","utils/three.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_ref","createElement","d","SvgArrowLeft","svgRef","title","props","fill","width","height","viewBox","ref","ForwardRef","forwardRef","SvgArrowRight","determineIndex","imageIndex","index","images","direction","Carousel","placeholder","rest","setImageIndex","useState","loaded","setLoaded","showPlaceholder","setShowPlaceholder","textures","setTextures","canvasRect","setCanvasRect","canvas","useRef","imagePlane","geometry","material","scene","camera","renderer","animating","swipeDirection","lastSwipePosition","scheduledAnimationFrame","prefersReducedMotion","usePrefersReducedMotion","inViewport","useInViewport","placeholderRef","springTween","springValue","swipeElement","currentImageAlt","alt","useEffect","cameraOptions","current","WebGLRenderer","antialias","OrthographicCamera","Scene","setPixelRatio","renderPixelRatio","setClearColor","setSize","domElement","style","background","Color","position","z","cleanScene","cleanRenderer","mounted","async","textureLoader","TextureLoader","anisotropy","capabilities","getMaxAnisotropy","texturePromises","map","imageSrc","getImageFromSrcSet","image","imageTexture","loadAsync","initTexture","encoding","sRGBEncoding","minFilter","LinearFilter","magFilter","generateMipmaps","Promise","all","ShaderMaterial","uniforms","dispFactor","type","value","currentImage","nextImage","vertexShader","fragmentShader","transparent","opacity","PlaneBufferGeometry","Mesh","set","add","requestAnimationFrame","render","loadImages","goToIndex","useCallback","onComplete","spring","from","get","to","velocity","getVelocity","stiffness","damping","start","navigate","cancelAnimationFrame","finalIndex","onNavClick","handleResize","rect","getBoundingClientRect","window","addEventListener","removeEventListener","animation","animate","stop","purgePlaceholder","placeholderElement","onSwipeMove","x","absoluteX","Math","abs","containerWidth","swipePercentage","nextIndex","displacementClamp","min","max","onSwipeEnd","duration","minSwipeDistance","pointerTracker","swipeXY","y","swipeStart","listen","event","preventDefault","pointer","swipeEnd","document","className","onKeyDown","selectedAction","ArrowRight","ArrowLeft","aria-atomic","aria-live","aria-label","role","aria-hidden","classNames","prerender","src","onClick","onMouseUp","blurOnMouseUp","aria-pressed","srcSet","sizes","resolve","reject","Error","tempImage","Image","srcset","onLoad","currentSrc","error","traverse","object","isMesh","dispose","isMaterial","cleanMaterial","keys","forceContextLoss","removeLights","lights","light","parent","remove"],"mappings":"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","file":"static/js/11.0f72b1b7.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M18.03 1.375L16.47.125-.031 20.75l16.5 20.625 1.562-1.25L2.53 20.75z\"\n});\n\nconst SvgArrowLeft = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  fill: \"currentColor\",\n  width: 18,\n  height: 42,\n  viewBox: \"0 0 18 42\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgArrowLeft, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/arrow-left.82d3848d.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M-.03 1.375L1.53.125l16.5 20.625-16.5 20.625-1.562-1.25 15.5-19.375z\"\n});\n\nconst SvgArrowRight = ({\n  svgRef,\n  title,\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  fill: \"currentColor\",\n  width: 18,\n  height: 42,\n  viewBox: \"0 0 18 42\",\n  ref: svgRef\n}, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref);\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SvgArrowRight, _extends({\n  svgRef: ref\n}, props)));\nexport default __webpack_public_path__ + \"static/media/arrow-right.08bebc7b.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  WebGLRenderer,\n  LinearFilter,\n  OrthographicCamera,\n  Scene,\n  PlaneBufferGeometry,\n  TextureLoader,\n  ShaderMaterial,\n  Mesh,\n  Color,\n  sRGBEncoding,\n} from 'three';\nimport { spring, value, listen, pointer } from 'popmotion';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion, useInViewport } from 'hooks';\nimport prerender from 'utils/prerender';\nimport { blurOnMouseUp } from 'utils/focus';\nimport { ReactComponent as ArrowLeft } from 'assets/arrow-left.svg';\nimport { ReactComponent as ArrowRight } from 'assets/arrow-right.svg';\nimport { vertex, fragment } from './carouselShader';\nimport { cleanScene, cleanRenderer, renderPixelRatio } from 'utils/three';\nimport { getImageFromSrcSet } from 'utils/image';\nimport './index.css';\n\nfunction determineIndex(imageIndex, index, images, direction) {\n  if (index !== null) return index;\n  const length = images.length;\n  const prevIndex = (imageIndex - 1 + length) % length;\n  const nextIndex = (imageIndex + 1) % length;\n  const finalIndex = direction > 0 ? nextIndex : prevIndex;\n  return finalIndex;\n}\n\nconst Carousel = ({ width, height, images, placeholder, ...rest }) => {\n  const [imageIndex, setImageIndex] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n  const [showPlaceholder, setShowPlaceholder] = useState(true);\n  const [textures, setTextures] = useState();\n  const [canvasRect, setCanvasRect] = useState();\n  const canvas = useRef();\n  const imagePlane = useRef();\n  const geometry = useRef();\n  const material = useRef();\n  const scene = useRef();\n  const camera = useRef();\n  const renderer = useRef();\n  const animating = useRef(false);\n  const swipeDirection = useRef();\n  const lastSwipePosition = useRef();\n  const scheduledAnimationFrame = useRef();\n  const prefersReducedMotion = usePrefersReducedMotion();\n  const inViewport = useInViewport(canvas, true);\n  const placeholderRef = useRef();\n  const springTween = useRef();\n  const springValue = useRef();\n  const swipeElement = useRef();\n\n  const currentImageAlt = `Slide ${imageIndex + 1} of ${images.length}. ${\n    images[imageIndex].alt\n  }`;\n\n  useEffect(() => {\n    const cameraOptions = [width / -2, width / 2, height / 2, height / -2, 1, 1000];\n    renderer.current = new WebGLRenderer({ canvas: canvas.current, antialias: false });\n    camera.current = new OrthographicCamera(...cameraOptions);\n    scene.current = new Scene();\n    renderer.current.setPixelRatio(renderPixelRatio);\n    renderer.current.setClearColor(0x111111, 1.0);\n    renderer.current.setSize(width, height);\n    renderer.current.domElement.style.width = '100%';\n    renderer.current.domElement.style.height = 'auto';\n    scene.current.background = new Color(0x111111);\n    camera.current.position.z = 1;\n\n    return () => {\n      animating.current = false;\n      cleanScene(scene.current);\n      cleanRenderer(renderer.current);\n    };\n  }, [height, width]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const loadImages = async () => {\n      const textureLoader = new TextureLoader();\n      const anisotropy = renderer.current.capabilities.getMaxAnisotropy();\n\n      const texturePromises = images.map(async image => {\n        const imageSrc = await getImageFromSrcSet(image);\n        const imageTexture = await textureLoader.loadAsync(imageSrc);\n        await renderer.current.initTexture(imageTexture);\n        imageTexture.encoding = sRGBEncoding;\n        imageTexture.minFilter = LinearFilter;\n        imageTexture.magFilter = LinearFilter;\n        imageTexture.anisotropy = anisotropy;\n        imageTexture.generateMipmaps = false;\n        return imageTexture;\n      });\n\n      const textures = await Promise.all(texturePromises);\n\n      // Cancel if the component has unmounted during async code\n      if (!mounted) return;\n\n      material.current = new ShaderMaterial({\n        uniforms: {\n          dispFactor: { type: 'f', value: 0 },\n          direction: { type: 'f', value: 1 },\n          currentImage: { type: 't', value: textures[0] },\n          nextImage: { type: 't', value: textures[1] },\n        },\n        vertexShader: vertex,\n        fragmentShader: fragment,\n        transparent: false,\n        opacity: 1,\n      });\n\n      geometry.current = new PlaneBufferGeometry(width, height, 1);\n      imagePlane.current = new Mesh(geometry.current, material.current);\n      imagePlane.current.position.set(0, 0, 0);\n      scene.current.add(imagePlane.current);\n\n      setLoaded(true);\n      setTextures(textures);\n\n      requestAnimationFrame(() => {\n        renderer.current.render(scene.current, camera.current);\n      });\n    };\n\n    if (inViewport && !loaded) {\n      loadImages();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [height, images, inViewport, loaded, width]);\n\n  const goToIndex = useCallback(\n    ({ index, direction = 1 }) => {\n      if (!textures) return;\n      setImageIndex(index);\n      const uniforms = material.current.uniforms;\n      uniforms.nextImage.value = textures[index];\n      uniforms.direction.value = direction;\n\n      const onComplete = () => {\n        uniforms.currentImage.value = textures[index];\n        uniforms.dispFactor.value = 0;\n        animating.current = false;\n      };\n\n      if (!prefersReducedMotion && uniforms.dispFactor.value !== 1) {\n        animating.current = true;\n\n        springValue.current = value(uniforms.dispFactor.value, value => {\n          uniforms.dispFactor.value = value;\n          if (value === 1) onComplete();\n        });\n\n        springTween.current = spring({\n          from: springValue.current.get(),\n          to: 1,\n          velocity: springValue.current.getVelocity(),\n          stiffness: 100,\n          damping: 20,\n        }).start(springValue.current);\n      } else {\n        onComplete();\n        requestAnimationFrame(() => {\n          renderer.current.render(scene.current, camera.current);\n        });\n      }\n    },\n    [prefersReducedMotion, textures]\n  );\n\n  const navigate = useCallback(\n    ({ direction, index = null, ...rest }) => {\n      if (!loaded) return;\n\n      if (animating.current) {\n        cancelAnimationFrame(scheduledAnimationFrame.current);\n        scheduledAnimationFrame.current = requestAnimationFrame(() =>\n          navigate({ direction, index, ...rest })\n        );\n        return;\n      }\n\n      const finalIndex = determineIndex(imageIndex, index, textures, direction);\n      goToIndex({ index: finalIndex, direction: direction, ...rest });\n    },\n    [goToIndex, imageIndex, loaded, textures]\n  );\n\n  const onNavClick = useCallback(\n    index => {\n      if (index === imageIndex) return;\n      const direction = index > imageIndex ? 1 : -1;\n      navigate({ direction, index });\n    },\n    [imageIndex, navigate]\n  );\n\n  useEffect(() => {\n    const handleResize = () => {\n      const rect = canvas.current.getBoundingClientRect();\n      setCanvasRect(rect);\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    let animation;\n\n    const animate = () => {\n      animation = requestAnimationFrame(animate);\n      if (animating.current) {\n        renderer.current.render(scene.current, camera.current);\n      }\n    };\n\n    animation = requestAnimationFrame(animate);\n\n    return () => {\n      cancelAnimationFrame(animation);\n\n      if (springTween.current) {\n        springTween.current.stop();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (placeholder) {\n      const purgePlaceholder = () => {\n        setShowPlaceholder(false);\n      };\n\n      const placeholderElement = placeholderRef.current;\n      placeholderElement.addEventListener('transitionend', purgePlaceholder);\n\n      return () => {\n        if (placeholderElement) {\n          placeholderElement.removeEventListener('transitionend', purgePlaceholder);\n        }\n      };\n    }\n  }, [placeholder]);\n\n  const onSwipeMove = useCallback(\n    position => {\n      if (animating.current || !material.current || !textures) return;\n      const { x } = position;\n      lastSwipePosition.current = x;\n      const absoluteX = Math.abs(x);\n      const containerWidth = canvasRect.width;\n      swipeDirection.current = x > 0 ? -1 : 1;\n      const swipePercentage = 1 - ((absoluteX - containerWidth) / containerWidth) * -1;\n      const nextIndex = determineIndex(imageIndex, null, images, swipeDirection.current);\n      const uniforms = material.current.uniforms;\n      const displacementClamp = Math.min(Math.max(swipePercentage, 0), 1);\n\n      uniforms.currentImage.value = textures[imageIndex];\n      uniforms.nextImage.value = textures[nextIndex];\n      uniforms.direction.value = swipeDirection.current;\n\n      if (!prefersReducedMotion) {\n        uniforms.dispFactor.value = displacementClamp;\n      }\n\n      requestAnimationFrame(() => {\n        renderer.current.render(scene.current, camera.current);\n      });\n    },\n    [canvasRect, imageIndex, images, prefersReducedMotion, textures]\n  );\n\n  const onSwipeEnd = useCallback(() => {\n    if (!material.current) return;\n    const uniforms = material.current.uniforms;\n    const duration = (1 - uniforms.dispFactor.value) * 1000;\n    const position = Math.abs(lastSwipePosition.current);\n    const minSwipeDistance = canvasRect.width * 0.2;\n    lastSwipePosition.current = 0;\n\n    if (animating.current) return;\n    if (position === 0 || !position) return;\n\n    if (position > minSwipeDistance) {\n      navigate({\n        duration,\n        direction: swipeDirection.current,\n      });\n    } else {\n      uniforms.currentImage.value = uniforms.nextImage.value;\n      uniforms.nextImage.value = uniforms.currentImage.value;\n      uniforms.dispFactor.value = 1 - uniforms.dispFactor.value;\n\n      navigate({\n        direction: swipeDirection.current * -1,\n        index: imageIndex,\n      });\n    }\n  }, [canvasRect, imageIndex, navigate]);\n\n  useEffect(() => {\n    let pointerTracker;\n\n    const swipeXY = value({ x: 0, y: 0 }, position => {\n      onSwipeMove(position);\n    });\n\n    const swipeStart = listen(swipeElement.current, 'mousedown touchstart').start(\n      event => {\n        event.preventDefault();\n        pointerTracker = pointer({ x: 0, y: 0 }).start(swipeXY);\n      }\n    );\n\n    const swipeEnd = listen(document, 'mouseup touchend').start(() => {\n      if (pointerTracker) {\n        onSwipeEnd();\n        pointerTracker.stop();\n      }\n    });\n\n    return () => {\n      swipeStart.stop();\n      swipeEnd.stop();\n\n      if (pointerTracker) {\n        pointerTracker.stop();\n      }\n    };\n  }, [onSwipeEnd, onSwipeMove]);\n\n  const handleKeyDown = event => {\n    const actions = {\n      ArrowRight: () => navigate({ direction: 1 }),\n      ArrowLeft: () => navigate({ direction: -1 }),\n    };\n\n    const selectedAction = actions[event.key];\n\n    if (!!selectedAction) {\n      selectedAction();\n    }\n  };\n\n  return (\n    <div className=\"carousel\" onKeyDown={handleKeyDown} {...rest}>\n      <div className=\"carousel__content\">\n        <div className=\"carousel__image-wrapper\" ref={swipeElement}>\n          <div\n            aria-atomic\n            className=\"carousel__canvas-wrapper\"\n            aria-live=\"polite\"\n            aria-label={currentImageAlt}\n            role=\"img\"\n          >\n            <canvas aria-hidden className=\"carousel__canvas\" ref={canvas} />\n          </div>\n          {showPlaceholder && placeholder && (\n            <img\n              aria-hidden\n              className={classNames('carousel__placeholder', {\n                'carousel__placeholder--loaded': !prerender && loaded && textures,\n              })}\n              src={placeholder}\n              ref={placeholderRef}\n              alt=\"\"\n              role=\"presentation\"\n            />\n          )}\n        </div>\n        <button\n          className=\"carousel__button carousel__button--prev\"\n          aria-label=\"Previous slide\"\n          onClick={() => navigate({ direction: -1 })}\n          onMouseUp={blurOnMouseUp}\n        >\n          <ArrowLeft />\n        </button>\n        <button\n          className=\"carousel__button carousel__button--next\"\n          aria-label=\"Next slide\"\n          onClick={() => navigate({ direction: 1 })}\n          onMouseUp={blurOnMouseUp}\n        >\n          <ArrowRight />\n        </button>\n      </div>\n      <div className=\"carousel__nav\">\n        {images.map((image, index) => (\n          <button\n            className=\"carousel__nav-button\"\n            key={image.alt}\n            onClick={() => onNavClick(index)}\n            onMouseUp={blurOnMouseUp}\n            aria-label={`Jump to slide ${index + 1}`}\n            aria-pressed={index === imageIndex}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","export const vertex = `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }\n`;\n\nexport const fragment = `\n  varying vec2 vUv;\n  uniform sampler2D currentImage;\n  uniform sampler2D nextImage;\n  uniform float dispFactor;\n  uniform float direction;\n\n  void main() {\n    vec2 uv = vUv;\n    vec4 _currentImage;\n    vec4 _nextImage;\n    float intensity = 0.6;\n\n    vec4 orig1 = texture2D(currentImage, uv);\n    vec4 orig2 = texture2D(nextImage, uv);\n\n    vec2 distortedPosition = vec2(\n      uv.x + direction * (dispFactor * (orig2.r * intensity)),\n      uv.y + direction * (dispFactor * (orig2 * intensity))\n    );\n\n    vec2 distortedPosition2 = vec2(\n      uv.x - direction * ((1.0 - dispFactor) * (orig1.r * intensity)),\n      uv.y - direction * ((1.0 - dispFactor) * (orig1 * intensity))\n    );\n\n    _currentImage = texture2D(currentImage, distortedPosition);\n    _nextImage = texture2D(nextImage, distortedPosition2);\n\n    vec4 finalTexture = mix(_currentImage, _nextImage, dispFactor);\n    gl_FragColor = finalTexture;\n  }\n`;\n","/**\n * Uses the browser's image loading to get the correct image src from a srcSet\n */\nexport async function getImageFromSrcSet({ src, srcSet, sizes }) {\n  return new Promise((resolve, reject) => {\n    try {\n      if (!src && !srcSet) {\n        throw new Error('No image src or srcSet provided');\n      }\n\n      const tempImage = new Image();\n\n      if (src) {\n        tempImage.src = src;\n      }\n\n      if (srcSet) {\n        tempImage.srcset = srcSet;\n      }\n\n      if (sizes) {\n        tempImage.sizes = sizes;\n      }\n\n      const onLoad = () => {\n        tempImage.removeEventListener('load', onLoad);\n        const source = tempImage.currentSrc;\n        resolve(source);\n      };\n\n      tempImage.addEventListener('load', onLoad);\n    } catch (error) {\n      reject(`Error loading ${srcSet}: ${error}`);\n    }\n  });\n}\n","/**\n * Clean up a scene's materials and geometry\n */\nexport const cleanScene = scene => {\n  scene.traverse(object => {\n    if (!object.isMesh) return;\n\n    object.geometry.dispose();\n\n    if (object.material.isMaterial) {\n      cleanMaterial(object.material);\n    } else {\n      for (const material of object.material) {\n        cleanMaterial(material);\n      }\n    }\n  });\n\n  scene.dispose();\n};\n\n/**\n * Clean up and dispose of a material\n */\nexport const cleanMaterial = material => {\n  material.dispose();\n\n  for (const key of Object.keys(material)) {\n    const value = material[key];\n    if (value && typeof value === 'object' && 'minFilter' in value) {\n      value.dispose();\n    }\n  }\n};\n\n/**\n * Clean up and dispose of a renderer\n */\nexport const cleanRenderer = renderer => {\n  renderer.dispose();\n  renderer.forceContextLoss();\n  renderer = null;\n};\n\n/**\n * Clean up lights by removing them from their parent\n */\nexport const removeLights = lights => {\n  for (const light of lights) {\n    light.parent.remove(light);\n  }\n};\n\n/**\n * A reasonable default pixel ratio\n */\nexport const renderPixelRatio = 2;\n"],"sourceRoot":""}